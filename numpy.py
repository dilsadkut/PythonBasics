# -*- coding: utf-8 -*-
"""Numpy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13oKyu-foYqbpyh4qUj6I96M-3lE4wJ39

# Numpy
![Scalar Vector Matrix Tensor](https://res.cloudinary.com/practicaldev/image/fetch/s--oTgfo1EL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/adhiraiyan/DeepLearningWithTF2.0/master/notebooks/figures/fig0201a.png)

credit: https://res.cloudinary.com/
"""

import numpy as np

numbers_list = [1, 2, 3, 4, 5, 6]
print(numbers_list)

numbers_tuple = tuple([1, 2, 3, 4, 5, 6])
print(numbers_tuple)

numbers_arr = np.array(1, 2, 3, 4, 5, 6)

help(np.array)

np.array([1, 2, 3, 4, 5]) * 3

numbers_arr = np.array([1, 2, "ahmet", 4.0, 5, 6], np.int)
print(numbers_arr)

print(type(numbers_arr))
print(type(numbers_arr[0]))

numbers_list / 2

print(f"Before: {numbers_list[0]}")
numbers_list[0] = numbers_list[0] / 2
print(f"After: {numbers_list[0]}")

numbers_arr / 2

numbers_arr.shape

numbers_arr = numbers_arr.reshape(1, 6)
numbers_arr.shape

numbers_arr

"""### Most Used Methods (En Çok Kullanılan Metotlar)"""

np.sin(numbers_arr)

np.cos(numbers_arr)

np.log(numbers_arr)

np.exp(numbers_arr) # e^x , 2.718281

np.max(numbers_arr)

np.argmax(numbers_arr)

np.min(numbers_arr)

np.argmin(numbers_arr)

numbers_arr.exp()

numbers_arr.sum()/numbers_arr.size

np.mean(numbers_arr)

np.std(numbers_arr)

numbers_arr = numbers_arr.reshape(2, 3)
print(numbers_arr)

# axis=1 => Row
# axis=0 => Column
np.sum(numbers_arr, axis=1)

zeros = np.zeros((3, 3))
print(zeros)

ones = np.ones((3, 3))
print(ones)

ones - 1

zeros + 1

# Identity matrix
# Birim matris
eye = np.eye(3)
eye

eye.diagonal()

np.diag(eye)

np.random.random((3, 3))

"""### Slicing & Indexing (Dilimleme && İndisleme)"""

numbers_arr

numbers_arr[0]

# Ellipsis or :
numbers_arr[:, 0]

numbers_arr[:, 0: 3: 2]

print(numbers_arr[1, 0])
print(numbers_arr[0, 1])

numbers_arr > 2

numbers_arr[numbers_arr > 2]

# 3 index:
# 4 index:
# 5 index:
# 6 index: 
idx = np.where(numbers_arr > 2)

numbers_arr[idx]

eye = np.eye(3)
eye = eye + 2
print(eye)

np.linalg.det(eye)

# Return evenly spaced numbers over a specified interval.
np.linspace(1.0, 10.0, num=5)

for i in range(0, 10, 1):
    print(i)

1.2 - 1.0

round(1.2 - 1.0, 2)
round(0.2 + 0.1, 2)

"""More details about [floating point](https://docs.python.org/3/tutorial/floatingpoint.html#tut-fp-issues) in Python.

### Dot Product (İç Çarpım)
![Dot product](https://algebra1course.files.wordpress.com/2013/02/slide10.jpg)

credit: https://algebra1course.files.wordpress.com/
"""

arr_a = np.random.randint(1, 100, size=(5, 7))
arr_a

arr_b = np.random.randint(1, 100, size=(5, 7))
arr_b

arr_a * arr_b

(arr_a * arr_b).shape

arr_axb = np.dot(arr_a, arr_b)
arr_axb

arr_a @ arr_b

"""### What now? (Şimdi ne olacak?)

![Advanced NumPy: Master stride tricks](https://miro.medium.com/max/1400/1*zss0Ayum0LBpN6fkzml1fw.png)

Credit: [Advanced NumPy: Master stride tricks](https://towardsdatascience.com/advanced-numpy-master-stride-tricks-with-25-illustrated-exercises-923a9393ab20#12e7)
"""